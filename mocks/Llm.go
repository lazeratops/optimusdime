// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	llm "github.com/lazeratops/optimusdime/src/llm"
	mock "github.com/stretchr/testify/mock"
)

// Llm is an autogenerated mock type for the Llm type
type Llm struct {
	mock.Mock
}

// FindElements provides a mock function with given fields: elements, content
func (_m *Llm) FindElements(elements llm.DesiredElements, content string) (map[string]int, error) {
	ret := _m.Called(elements, content)

	if len(ret) == 0 {
		panic("no return value specified for FindElements")
	}

	var r0 map[string]int
	var r1 error
	if rf, ok := ret.Get(0).(func(llm.DesiredElements, string) (map[string]int, error)); ok {
		return rf(elements, content)
	}
	if rf, ok := ret.Get(0).(func(llm.DesiredElements, string) map[string]int); ok {
		r0 = rf(elements, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	if rf, ok := ret.Get(1).(func(llm.DesiredElements, string) error); ok {
		r1 = rf(elements, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLlm creates a new instance of Llm. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLlm(t interface {
	mock.TestingT
	Cleanup(func())
}) *Llm {
	mock := &Llm{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
