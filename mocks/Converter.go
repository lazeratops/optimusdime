// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	document "github.com/lazeratops/optimusdime/src/document"
	mock "github.com/stretchr/testify/mock"
)

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

// Convert provides a mock function with given fields: targetCurrency, statement
func (_m *Converter) Convert(targetCurrency document.Currency, statement *document.Document) (*document.Document, error) {
	ret := _m.Called(targetCurrency, statement)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 *document.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(document.Currency, *document.Document) (*document.Document, error)); ok {
		return rf(targetCurrency, statement)
	}
	if rf, ok := ret.Get(0).(func(document.Currency, *document.Document) *document.Document); ok {
		r0 = rf(targetCurrency, statement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*document.Document)
		}
	}

	if rf, ok := ret.Get(1).(func(document.Currency, *document.Document) error); ok {
		r1 = rf(targetCurrency, statement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConverter creates a new instance of Converter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Converter {
	mock := &Converter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
